// --- src/models/CurrencyRate.model.ts ---
import mongoose, { Schema, Document } from "mongoose";

// Определяем допустимые коды валют, которые мы будем хранить и использовать.
// Используем 'KRW', 'CNY', 'JPY', 'EUR' согласно требованиям для калькулятора.
export type CurrencyCode = "KRW" | "CNY" | "JPY" | "EUR";

// Описываем интерфейс для документа в коллекции курсов валют с помощью TypeScript.
// Это помогает с автодополнением и проверкой типов при работе с данными.
export interface ICurrencyRate extends Document {
  code: CurrencyCode; // Уникальный код валюты (например, 'EUR')
  rate: number; // Значение курса этой валюты по отношению к базовой (предполагаем RUB)
  updatedAt: Date; // Дата и время последнего обновления записи (управляется Mongoose)
  // Поле createdAt нам не нужно, поэтому в опциях схемы оно отключено.
}

// Определяем схему данных для Mongoose.
// Схема описывает структуру документов в коллекции MongoDB.
const CurrencyRateSchema: Schema<ICurrencyRate> = new Schema(
  {
    // Поле 'code': код валюты
    code: {
      type: String, // Тип данных в MongoDB
      required: [true, "Код валюты обязателен"], // Поле обязательно для заполнения
      unique: true, // Значения в этом поле должны быть уникальными во всей коллекции
      enum: {
        // Ограничиваем возможные значения для поля 'code'
        values: ["KRW", "CNY", "JPY", "EUR"],
        message:
          "Недопустимый код валюты: {VALUE}. Допустимые: KRW, CNY, JPY, EUR.", // Сообщение об ошибке при неверном значении
      },
      index: true, // Создаем индекс по этому полю для ускорения поиска
    },
    // Поле 'rate': значение курса
    rate: {
      type: Number, // Тип данных в MongoDB
      required: [true, "Значение курса обязательно"], // Поле обязательно
      min: [0, "Курс валюты не может быть отрицательным"], // Минимальное допустимое значение
      // Можно добавить и другие валидаторы, например, максимальное значение, если нужно
    },
  },
  {
    // Опции схемы:
    timestamps: {
      createdAt: false, // Не добавлять автоматически поле createdAt
      updatedAt: true, // Автоматически обновлять поле updatedAt при каждом изменении документа
    },
    versionKey: false, // Не добавлять поле версии (__v), которое Mongoose добавляет по умолчанию
    collection: "currency_rates", // Явно указываем имя коллекции в MongoDB
  }
);

// Создаем и экспортируем модель Mongoose.
// Модель - это конструктор, который позволяет создавать, читать, обновлять и удалять документы
// в соответствующей коллекции MongoDB, используя определенную схему.
// Мы типизируем модель с помощью интерфейса ICurrencyRate для удобства работы в TypeScript.
export default mongoose.model<ICurrencyRate>(
  "CurrencyRate",
  CurrencyRateSchema
);
